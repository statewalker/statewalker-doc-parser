import { type TTestData } from "../data.types.ts";

export const testData: TTestData[] = [
  { 
    input: " A B C ",
    description: "should read text and spaces",
    expected: {
      type: "Block",
      start: 0,
      end: 7,
      value: " A B C ",
      children: [
        {
          type: "Spaces",
          start: 0,
          end: 1,
          value: " ",
        },
        {
          type: "Word",
          start: 1,
          end: 2,
          value: "A",
        },
        {
          type: "Spaces",
          start: 2,
          end: 3,
          value: " ",
        },
        {
          type: "Word",
          start: 3,
          end: 4,
          value: "B",
        },
        {
          type: "Spaces",
          start: 4,
          end: 5,
          value: " ",
        },
        {
          type: "Word",
          start: 5,
          end: 6,
          value: "C",
        },
        {
          type: "Spaces",
          start: 6,
          end: 7,
          value: " ",
        },
      ],
    },
  },
  {
    input: " A B C \n",
    description: "should read text, spaces and ends of lines",
    expected: {
      type: "Block",
      start: 0,
      end: 8,
      value: " A B C \n",
      children: [
        { type: "Spaces", value: " ", start: 0, end: 1 },
        { type: "Word", value: "A", start: 1, end: 2 },
        { type: "Spaces", value: " ", start: 2, end: 3 },
        { type: "Word", value: "B", start: 3, end: 4 },
        { type: "Spaces", value: " ", start: 4, end: 5 },
        { type: "Word", value: "C", start: 5, end: 6 },
        { type: "Spaces", value: " ", start: 6, end: 7 },
        { type: "Eol", value: "\n", start: 7, end: 8 },
      ],
    },
  },
  {
    description: "should read blocks with spaces",
    input: "before     after",
    expected: {
      type: "Block",
      start: 0,
      end: 16,
      value: "before     after",
      children: [
        {
          type: "Word",
          start: 0,
          end: 6,
          value: "before",
        },
        {
          type: "Spaces",
          start: 6,
          end: 11,
          value: "     ",
        },
        {
          type: "Word",
          start: 11,
          end: 16,
          value: "after",
        },
      ],
    },
  },

  // -------------------------------------------------------------
  {
    input: "first\n\nsecond",
    description: "should read paragraphs until the next empty line",
    expected: {
      type: "Block",
      start: 0,
      end: 13,
      value: "first\n\nsecond",
      children: [
        { type: "Word", value: "first", start: 0, end: 5 },
        { type: "Eol", value: "\n\n", start: 5, end: 7 },
        { type: "Word", value: "second", start: 7, end: 13 },
      ],
    },
  },
  {
    input: `(c) (C) (r) (R) (tm) (TM) (p) (P) +- ?!!.....`,
    description: "should read text with punctuation symbols",
    expected: {
      type: "Block",
      start: 0,
      end: 45,
      value: "(c) (C) (r) (R) (tm) (TM) (p) (P) +- ?!!.....",
      children: [
        { type: "Punctuation", value: "(", start: 0, end: 1 },
        { type: "Word", value: "c", start: 1, end: 2 },
        { type: "Punctuation", value: ")", start: 2, end: 3 },
        { type: "Spaces", value: " ", start: 3, end: 4 },
        { type: "Punctuation", value: "(", start: 4, end: 5 },
        { type: "Word", value: "C", start: 5, end: 6 },
        { type: "Punctuation", value: ")", start: 6, end: 7 },
        { type: "Spaces", value: " ", start: 7, end: 8 },
        { type: "Punctuation", value: "(", start: 8, end: 9 },
        { type: "Word", value: "r", start: 9, end: 10 },
        { type: "Punctuation", value: ")", start: 10, end: 11 },
        { type: "Spaces", value: " ", start: 11, end: 12 },
        { type: "Punctuation", value: "(", start: 12, end: 13 },
        { type: "Word", value: "R", start: 13, end: 14 },
        { type: "Punctuation", value: ")", start: 14, end: 15 },
        { type: "Spaces", value: " ", start: 15, end: 16 },
        { type: "Punctuation", value: "(", start: 16, end: 17 },
        { type: "Word", value: "tm", start: 17, end: 19 },
        { type: "Punctuation", value: ")", start: 19, end: 20 },
        { type: "Spaces", value: " ", start: 20, end: 21 },
        { type: "Punctuation", value: "(", start: 21, end: 22 },
        { type: "Word", value: "TM", start: 22, end: 24 },
        { type: "Punctuation", value: ")", start: 24, end: 25 },
        { type: "Spaces", value: " ", start: 25, end: 26 },
        { type: "Punctuation", value: "(", start: 26, end: 27 },
        { type: "Word", value: "p", start: 27, end: 28 },
        { type: "Punctuation", value: ")", start: 28, end: 29 },
        { type: "Spaces", value: " ", start: 29, end: 30 },
        { type: "Punctuation", value: "(", start: 30, end: 31 },
        { type: "Word", value: "P", start: 31, end: 32 },
        { type: "Punctuation", value: ")", start: 32, end: 33 },
        { type: "Spaces", value: " ", start: 33, end: 34 },
        { type: "Punctuation", value: "-", start: 35, end: 36 },
        { type: "Spaces", value: " ", start: 36, end: 37 },
        { type: "Punctuation", value: "?!!.....", start: 37, end: 45 },
      ],
    },
  },
];
