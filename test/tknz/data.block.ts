import { TTestData } from "./data.types";

export const blockTestData: TTestData[] = [
  {
    input: "first\n\nsecond",
    description: "should read paragraphs until the next empty line",
    expected: {
      level: 3,
      type: "Block",
      start: 0,
      end: 5,
      value: "first",
      children: [
        {
          type: "Text",
          level: 0,
          start: 0,
          end: 5,
          value: "first",
        },
      ],
    },
  },
  {
    input: "first\n${ inner \n\n\n code }\nsecond",
    description:
      "should read paragraphs containing code blocks with empty lines",
    expected: {
      level: 3,
      type: "Block",
      start: 0,
      end: 32,
      value: "first\n${ inner \n\n\n code }\nsecond",
      children: [
        {
          type: "Text",
          level: 0,
          start: 0,
          end: 5,
          value: "first",
        },
        {
          type: "Eol",
          level: 0,
          start: 5,
          end: 6,
          value: "\n",
        },
        {
          type: "Code",
          level: 0,
          codeStart: 8,
          codeEnd: 24,
          code: [" inner \n\n\n code "],
          start: 6,
          end: 25,
          value: "${ inner \n\n\n code }",
        },
        {
          type: "Eol",
          level: 0,
          start: 25,
          end: 26,
          value: "\n",
        },
        {
          type: "Text",
          level: 0,
          start: 26,
          end: 32,
          value: "second",
        },
      ],
    },
  },

  {
    input: " A B C ",
    description: "should read text and spaces",
    expected: {
      level: 3,
      type: "Block",
      start: 0,
      end: 7,
      value: " A B C ",
      children: [
        {
          type: "Space",
          level: 0,
          start: 0,
          end: 1,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 1,
          end: 2,
          value: "A",
        },
        {
          type: "Space",
          level: 0,
          start: 2,
          end: 3,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 3,
          end: 4,
          value: "B",
        },
        {
          type: "Space",
          level: 0,
          start: 4,
          end: 5,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 5,
          end: 6,
          value: "C",
        },
        {
          type: "Space",
          level: 0,
          start: 6,
          end: 7,
          value: " ",
        },
      ],
    },
  },
  {
    input: " A B C \n",
    description: "should read text, spaces and ends of lines",
    expected: {
      level: 3,
      type: "Block",
      start: 0,
      end: 8,
      value: " A B C \n",
      children: [
        {
          type: "Space",
          level: 0,
          start: 0,
          end: 1,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 1,
          end: 2,
          value: "A",
        },
        {
          type: "Space",
          level: 0,
          start: 2,
          end: 3,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 3,
          end: 4,
          value: "B",
        },
        {
          type: "Space",
          level: 0,
          start: 4,
          end: 5,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 5,
          end: 6,
          value: "C",
        },
        {
          type: "Space",
          level: 0,
          start: 6,
          end: 7,
          value: " ",
        },
        {
          type: "Eol",
          level: 0,
          start: 7,
          end: 8,
          value: "\n",
        },
      ],
    },
  },
  {
    input: "before ${code} after",
    description: "should read text with code blocks",
    expected: {
      level: 3,
      type: "Block",
      start: 0,
      end: 20,
      value: "before ${code} after",
      children: [
        {
          type: "Text",
          level: 0,
          start: 0,
          end: 6,
          value: "before",
        },
        {
          type: "Space",
          level: 0,
          start: 6,
          end: 7,
          value: " ",
        },
        {
          type: "Code",
          level: 0,
          codeStart: 9,
          codeEnd: 13,
          code: ["code"],
          start: 7,
          end: 14,
          value: "${code}",
        },
        {
          type: "Space",
          level: 0,
          start: 14,
          end: 15,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 15,
          end: 20,
          value: "after",
        },
      ],
    },
  },
  {
    input: "before ${A1 `B1 ${C1 `${third level}` C2} B2` A2} after",
    description: "should read hierarchical code blocks",
    expected: {
      level: 3,
      type: "Block",
      start: 0,
      end: 55,
      value: "before ${A1 `B1 ${C1 `${third level}` C2} B2` A2} after",
      children: [
        {
          type: "Text",
          level: 0,
          start: 0,
          end: 6,
          value: "before",
        },
        {
          type: "Space",
          level: 0,
          start: 6,
          end: 7,
          value: " ",
        },
        {
          type: "Code",
          level: 0,
          codeStart: 9,
          codeEnd: 48,
          code: [
            "A1 `B1 ",
            {
              type: "Code",
              level: 0,
              codeStart: 18,
              codeEnd: 40,
              code: [
                "C1 `",
                {
                  type: "Code",
                  level: 0,
                  codeStart: 24,
                  codeEnd: 35,
                  code: ["third level"],
                  start: 22,
                  end: 36,
                  value: "${third level}",
                },
                "` C2",
              ],
              start: 16,
              end: 41,
              value: "${C1 `${third level}` C2}",
            },
            " B2` A2",
          ],
          start: 7,
          end: 49,
          value: "${A1 `B1 ${C1 `${third level}` C2} B2` A2}",
        },
        {
          type: "Space",
          level: 0,
          start: 49,
          end: 50,
          value: " ",
        },
        {
          type: "Text",
          level: 0,
          start: 50,
          end: 55,
          value: "after",
        },
      ],
    },
  },
];
